module InsightClub.Creator.Bot.Render

open Bot
open System
open Funogram.Telegram
open System.Text.RegularExpressions


type User = Types.User
type Button = Types.InlineKeyboardButton

type Services = {
    getCourses: Page -> Count -> Async<(CourseId * CourseTitle) list>
    getBlocks: CourseId -> Page -> Count -> Async<(BlockId * BlockTitle) list>
    getCourseTitle: CourseId -> Async<CourseTitle>
    getCourseDesc: CourseId -> Async<CourseDesc>
}

let private cln s = Regex("\n[ ]+").Replace(s, "\n")
let private random = Random()

let randomEmoji () =
    let emojis =
        [| "ü§∑‚Äç‚ôÇÔ∏è"
           "üòµ‚Äçüí´"
           "üôÑ"
           "ü§™"
           "üôÄ"
           "üò≠"
           "üò£"
           "ü•∫"
           "üòë"
           "üí©" |]

    emojis[random.Next(emojis.Length)]

let private commands =
    cln$"{Dispatcher.new'} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å ‚ö°Ô∏è
        {Dispatcher.edit} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å üìù
        {Dispatcher.help} - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (–í—ã —Å–µ–π—á–∞—Å –∑–¥–µ—Å—å) üëÄ"

let private idleMsg (user: User) =
    function
    | Idle.Started ->
        let lastName =
            user.LastName
            |> Option.map ((+) " ")
            |> Option.defaultValue String.Empty

        cln$"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InsightClub.Bot, {user.FirstName} \
            {lastName}! ‚ú® –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ \
            –∫—É—Ä—Å—ã! üòé

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ üëÄ"

    | Idle.Helping ->
        cln$"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–∫—É InsightClub.Creator.Bot! ü§ñ

            –≠—Ç–æ—Ç –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ üßû‚Äç‚ôÇ
            –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è \
            –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–º–µ—é—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ \
            –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –ª–µ–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.

            {commands}

            –£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ {Dispatcher.help} —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è. \
            –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö –æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è, –∏–±–æ –∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–º–æ–∂–µ—Ç \
            –í–∞–º –ª–µ–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è üî•"

    | Idle.NoCourses ->
        cln$"–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤ {randomEmoji ()}

            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É {Dispatcher.new'} ü§π‚Äç‚ôÇÔ∏è"

    | Idle.CreateCanceled ->
        cln$"–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            {commands}"

    | Idle.EditCanceled ->
        cln$"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            {commands}"

    | Idle.ExitedEditing ->
        cln$"–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ üßû‚Äç‚ôÇ
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.

            {commands}"

    | Idle.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ {Dispatcher.help} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ üëÄ"

let private creatingCourseMsg =
    function
    | CreatingCourse.Started ->
        cln "–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ üßö‚Äç‚ôÇÔ∏è

            –ö–∞–∫ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å? üìù"

    | CreatingCourse.TitleError NonUnique ->
        cln "–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ü§∑‚Äç‚ôÇÔ∏è

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."

    | CreatingCourse.TitleError TooLong ->
        cln "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. üò≠

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ."

    | CreatingCourse.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞.

            –ö–∞–∫ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å? üìù"

let private editingCourseMsg =
    function
    | EditingCourse.CourseCreated ->
        cln "–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω! ‚úÖ

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª. \
            –ü–æ–º–∏–º–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–∞–∫–∂–µ –∏ \
            —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞."

    | EditingCourse.Editing ->
        cln "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª. \
            –ü–æ–º–∏–º–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–∞–∫–∂–µ –∏ \
            —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞."

    | EditingCourse.TitleCanceled ->
        cln "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.TitleSet ->
        cln "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.DescCanceled ->
        cln "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.DescSet ->
        cln "–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.NewBlockCanceled ->
        cln "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.BlockCanceled ->
        cln "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ üëå

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.NoBlocks ->
        cln$"–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–æ–∫–æ–≤ {randomEmoji ()}

            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ ü§π‚Äç‚ôÇÔ∏è

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

    | EditingCourse.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ‚úèÔ∏è

            –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

let private editingTitleMsg title =
    function
    | EditingTitle.Started ->
        cln$"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ü•∏

            –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:
            {title}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å."

    | EditingTitle.TitleError NonUnique ->
        cln$"–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§∑‚Äç‚ôÇÔ∏è

            –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:
            {title}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å."

    | EditingTitle.TitleError TooLong ->
        cln$"–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. üò≠

            –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:
            {title}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å."

    | EditingTitle.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:
            {title}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å."

let private editingDescMsg desc =
    let desc =
        if String.IsNullOrEmpty desc then
            "–£ –í–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."

        else
            cln$"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:
                {desc}"

    function
    | EditingDesc.Started ->
        cln$"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ üëΩ

            {desc}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. \
            –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –≠—Ç–æ —Ç–æ, —á—Ç–æ –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã \
            –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–µ —Å—á–∏—Ç–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."

    | EditingDesc.DescTooLong ->
        cln$"–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤. ü•∫

            {desc}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞. \
            –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –≠—Ç–æ —Ç–æ, —á—Ç–æ –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã \
            –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–µ —Å—á–∏—Ç–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."

    | EditingDesc.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            {desc}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞. \
            –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –≠—Ç–æ —Ç–æ, —á—Ç–æ –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã \
            –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–µ —Å—á–∏—Ç–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."

let private listingCoursesMsg page count courseCount msg =
    let m s =
        match msg with
        | ListingCourses.Started -> s

        | ListingCourses.Error ->
            cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. {randomEmoji ()}

                {s}"

    let min = page * count + 1
    let max = page * count + courseCount

    let text =
        if min = max then
            $"–ö—É—Ä—Å ‚Ññ {min}"

        else
            $"–ö—É—Ä—Å—ã —Å ‚Ññ {min} –ø–æ ‚Ññ {max}"

    cln (m text)

let private creatingBlockMsg =
    function
    | CreatingBlock.Started ->
        cln "–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ üí´

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞."

    | CreatingBlock.TitleReserved ->
        cln "–ë–ª–æ–∫ —Å —Ç–∞–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ü§∑‚Äç‚ôÇÔ∏è

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π."

    | CreatingBlock.Error ->
        cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞.

            –ö–∞–∫ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–∑–∞–≥–ª–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫? üìù"

let private editingBlockMsg title =
    function
    | EditingBlock.Started ->
        cln$"{title}

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ ‚ú®

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç \
            –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞."

    | EditingBlock.ContentAdded content ->
        let addedMsg =
            match content with
            | Text _ -> "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω."
            | Photo _ -> "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
            | Audio _ -> "–ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
            | Video _ -> "–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
            | Voice _ -> "–ì–æ–ª–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω."
            | Document _ -> "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω."
            | VideoNote _ -> "–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."

        cln$"{title}

            {addedMsg}

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç \
            –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞."

    | EditingBlock.Cleaned ->
        cln$"{title}

            –ë–ª–æ–∫ –æ—á–∏—â–µ–Ω.

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ ‚ú®

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç \
            –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞."

    | EditingBlock.Error ->
        cln$"{title}

            –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {randomEmoji ()}

            –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞.

            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç \
            –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞."

let private listingBlocksMsg page count blocksCount msg =
    let m s =
        match msg with
        | ListingBlocks.Started -> s

        | ListingBlocks.Error ->
            cln$"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. {randomEmoji ()}

                {s}"

    let min = page * count + 1
    let max = page * count + blocksCount

    let text =
        if min = max then
            $"–ë–ª–æ–∫ ‚Ññ {min}"

        else
            $"–ë–ª–æ–∫–∏ —Å ‚Ññ {min} –ø–æ ‚Ññ {max}"

    cln (m text)

module private Button =
    let cancel = "–û—Ç–º–µ–Ω–∞ ‚ùå"
    let exit = "–í—ã—Ö–æ–¥ üö™"
    let title = "–ù–∞–∑–≤–∞–Ω–∏–µ ‚úèÔ∏è"
    let desc = "–û–ø–∏—Å–∞–Ω–∏–µ üñã"
    let show = "–ü–æ–∫–∞–∑–∞—Ç—å üëÅ"
    let prev = "‚¨ÖÔ∏è"
    let next = "‚û°Ô∏è"
    let add = "–î–æ–±–∞–≤–∏—Ç—å üìÑ"
    let edit = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üóÉ"
    let back = "–ù–∞–∑–∞–¥ üö™"
    let before = "–î–æ ‚¨ÖÔ∏è"
    let after = "–ü–æ—Å–ª–µ ‚û°Ô∏è"
    let insert = "--- –í—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫ ---"
    let move = "--- –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–ª–æ–∫—É ---"
    let movePrev = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π ‚¨ÖÔ∏è"
    let moveNext = "–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è"
    let clean = "–û—á–∏—Å—Ç–∏—Ç—å üóë"

let private button text command : Button = {
    Text = text
    CallbackData = Some command
    Url = None
    Pay = None
    LoginUrl = None
    CallbackGame = None
    SwitchInlineQuery = None
    SwitchInlineQueryCurrentChat = None
    WebApp = None
}

let state services user state =
    async {
        match state with
        | Inactive ->
            return
                String.Empty, None

        | Idle msg ->
            return
                idleMsg user msg, None

        | CreatingCourse msg ->
            return
                creatingCourseMsg msg,
                Some [
                    [
                        button Button.cancel Dispatcher.cancel
                    ]
                ]

        | EditingCourse (_, msg) ->
            return
                editingCourseMsg msg,
                Some [
                    [
                        button Button.title Dispatcher.title
                        button Button.desc Dispatcher.desc
                    ]
                    [
                        button Button.add Dispatcher.add
                        button Button.edit Dispatcher.edit
                    ]
                    [
                        button Button.exit Dispatcher.exit
                    ]
                ]

        | EditingTitle (courseId, msg) ->
            let! title = services.getCourseTitle courseId

            return
                editingTitleMsg title msg,
                Some [
                    [
                        button Button.cancel Dispatcher.cancel
                    ]
                ]

        | EditingDesc (courseId, msg) ->
            let! desc = services.getCourseDesc courseId

            return
                editingDescMsg desc msg,
                Some [
                    [
                        button Button.cancel Dispatcher.cancel
                    ]
                ]

        | ListingCourses subState ->
            let! courses = services.getCourses subState.Page subState.Count

            let coursesCount = List.length courses

            return
                listingCoursesMsg subState.Page subState.Count coursesCount subState.Msg,
                Some [
                    for id, title in courses do
                        yield [
                            button title $"{Dispatcher.edit} {id}"
                        ]

                        yield [
                            button Button.prev Dispatcher.prev
                            button Button.next Dispatcher.next
                        ]

                        yield [
                            button Button.exit Dispatcher.exit
                        ]
                ]

        | CreatingBlock subState ->
            return
                creatingBlockMsg subState.Msg,
                Some [
                    [
                        button Button.cancel Dispatcher.cancel
                    ]
                ]

        | EditingBlock subState ->
            return
                editingBlockMsg subState.Title subState.Msg,
                Some [
                    [
                        button Button.insert Dispatcher.ignore
                    ]
                    [
                        button Button.before Dispatcher.before
                        button Button.after Dispatcher.after
                    ]
                    [
                        button Button.move Dispatcher.ignore
                    ]
                    [
                        button Button.movePrev Dispatcher.prev
                        button Button.moveNext Dispatcher.next
                    ]
                    [
                        button Button.show Dispatcher.show
                        button Button.clean Dispatcher.clean
                    ]
                    [
                        button Button.back Dispatcher.back
                    ]
                ]

        | ListingBlocks subState ->
            let! blocks = services.getBlocks subState.CourseId subState.Page subState.Count

            let blocksCount = List.length blocks

            return
                listingBlocksMsg subState.Page subState.Count blocksCount subState.Msg,
                Some [
                    for i, (id, title) in List.indexed blocks do
                        yield [
                            button
                                $"{subState.Page * subState.Count + i + 1}. {title}"
                                $"{Dispatcher.edit} {id}"
                        ]

                        yield [
                            button Button.prev Dispatcher.prev
                            button Button.next Dispatcher.next
                        ]

                        yield [
                            button Button.back Dispatcher.back
                        ]
                ]
    }

let queryEffect =
    function
    | Some (Dispatcher.ShowContent []) ->
        [], Some "–≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç."

    | Some (Dispatcher.ShowContent contents) ->
        contents, None

    | Some Dispatcher.BeginningReached ->
        [], Some "–í—ã –¥–æ—à–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞."

    | Some Dispatcher.EndingReached ->
        [], Some "–í—ã –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞."

    | Some Dispatcher.BlockEmpty ->
        [], Some "–û—á–∏—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ë–ª–æ–∫ –ø—É—Å—Ç."

    | None ->
        [], None
